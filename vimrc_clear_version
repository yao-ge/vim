runtime! debian.vim
filetype off

" Plugin
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"" install Vundle
Plugin 'gmarik/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'ryanoasis/vim-devicons'
Plugin 'vim-syntastic/syntastic'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'majutsushi/tagbar'
Plugin 'valloric/youcompleteme'
Plugin 'zivyangll/git-blame.vim'
Plugin 'haya14busa/incsearch.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'rhysd/vim-clang-format'
Plugin 'instant-markdown/vim-instant-markdown'

" Plugin end
call vundle#end()
filetype plugin indent on

" Plugin config
"" Nerd tree
autocmd vimenter * NERDTreeFind
wincmd w
autocmd vimenter * wincmd w
let g:NERDTreeDirArrowExpandable='►'
let g:NERDTreeDirArrowCollapsible='▼'
let g:NERDTreeWinPos='left'
let g:NERDTreeWinSize=40
let g:NERDTreeShowLineNumbers=1
autocmd vimenter * if !argc()|NERDTree|endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
""nnoremap <F10> :NERDTreeToggle<CR>
let g:NERDTreeGitStatusIndicatorMapCustom={
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }

" Check if NERDTree is open or active
function! IsNERDTreeOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction
" Call NERDTreeFind if NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! SyncTree()
  if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction
" Highlight currently open buffer in NERDTree
autocmd BufEnter * call SyncTree()
 
function! ToggleNerdTree()
  set eventignore=BufEnter
  NERDTreeToggle
  set eventignore=
endfunction
""nmap <C-n> :call ToggleNerdTree()<CR>
nmap <F10> :call ToggleNerdTree()<CR>


"" syntastic check
execute pathogen#infect()
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%{FugitiveStatusline()}
set statusline+=%*

"" vim airline
let g:airline#extensions#tabline#enabled=1
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0

"" vim-colors-solarized
syntax enable                   " Enable syntax highlighting
colorscheme solarized           " Change color scheme
let g:solarized_termcolors=256
call togglebg#map("<F5>")
set background=dark             " Use colors that suit a dark background

"" tagbar
nnoremap <F9> :TagbarToggle<CR>

"" youcompleteme
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=1
let g:ycm_auto_trigger=1
"let g:ycm_confirm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
nnoremap <leader>yfw <Plug>(YCMFindSymbolInWorkspace)
nnoremap <leader>yfd <Plug>(YCMFindSymbolInDocument)
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jg :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_key_invoke_completion='<c-space>'
""set completeopt=menu,menuone
set completeopt=menu
set completeopt-=preview
let g:ycm_add_preview_to_completeopt=0
let g:ycm_autoclose_preview_window_after_insertion=0
let g:ycm_autoclose_preview_window_after_completion=0
""autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
""autocmd InsertLeave * if pumvisible() == 0|pclose|endif
let g:ycm_filetype_whitelist={
            \ "c":1,
            \ "cc":1,
            \ "cpp":1,
            \ "h":1,
            \ "hpp":1,
            \ "objc":1,
            \ "sh":1,
            \ "zsh":1,
            \ "zimbu":1,
            \ }
let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }
"" git blame
nnoremap <Leader>\ :<C-u>call gitblame#echo()<CR>

"" clang format
""autocmd FileType c ClangFormatAutoEnable
""autocmd FileType h ClangFormatAutoEnable
""autocmd FileType cu ClangFormatAutoEnable
""autocmd FileType cpp ClangFormatAutoEnable
""autocmd FileType hpp ClangFormatAutoEnable
let g:clang_format#command = 'clang-format'
nmap <F4> :ClangFormat<cr>
let g:clang_format#detect_style_file = 1

let g:clang_format#style_options = {
        \ "BasedOnStyle" : "Google",
        \ "ColumnLimit" : 0,
        \ "IndentWidth" : 4,
        \ "TabWidth" : 4}

"" instant markdown
"Uncomment to override defaults:
"let g:instant_markdown_slow = 1
"let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
"let g:instant_markdown_mathjax = 1
"let g:instant_markdown_mermaid = 1
"let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
"let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8888
"let g:instant_markdown_python = 1

" common set up
set number	                " Show line numbers
set showmatch	                " Highlight matching brace
set visualbell	                " Use visual bell (no beeping)
set hlsearch	                " Highlight all search results
set smartcase	                " Enable smart-case search
set gdefault	                " Always substitute all matches in a line
set ignorecase	                " Always case-insensitive
set incsearch	                " Searches for strings incrementally
set autoindent	                " Auto-indent new lines
set cindent	                " Use 'C' style program indenting
set expandtab	                " Use spaces instead of tabs
set shiftwidth=4	        " Number of auto-indent spaces
set smartindent	                " Enable smart-indent
set smarttab	                " Enable smart-tabs
set softtabstop=4	        " Number of spaces per Tab
set ruler	                " Show row and column ruler information
set undolevels=1000	        " Number of undo levels
set backspace=indent,eol,start	" Backspace behaviour
set lazyredraw                  " Don’t update screen during macro and script execution
set scrolloff=1                 " The number of screen lines to keep above and below the cursor
set display+=lastline           " Always try to show a paragraph’s last line
set relativenumber              " Show line number on the current line and relative numbers on all other lines
set mouse=a                     " Enable mouse for scrolling and resizing
set title                       " Set the window’s title, reflecting the file currently being edited
set autoread                    " Automatically re-read files if unmodified inside Vim
set confirm                     " Display a confirmation dialog when closing an unsaved file
set history=1000                " Increase the undo limit
set showcmd                     " 输入的命令显示出来，看的清楚些  
set laststatus=2                " 启动显示状态行(1),总是显示状态行(2)  
set nocompatible                " 去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限  
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set modifiable
set fileencodings=ucs-bom,utf-8,cp936,latin1
set fileencoding=utf-8
set binary
set noeol
set clipboard+=unnamed          " 共享剪贴板  
set magic                       " 设置魔术
set confirm                     " 在处理未保存或只读文件的时候，弹出确认
set completeopt=longest,menu    " 打开文件类型检测, 加了这句才可以用智能补全
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
set t_RV=

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add $PWD/cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

nnoremap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-\>f :cs find f <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-\>i :cs find i <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nnoremap <F12> gg=G
"去空行  
nnoremap <F2> :g/^\s*$/d<CR> 

"默认最大化窗口打开
au GUIEnter * simalt ~x

"""""新文件标题""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"新建.c,.h,.sh,.java文件，自动插入文件头 
" autocmd BufNewFile *.py,*.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
autocmd BufNewFile * exec ":call SetTitle()" 

""定义函数SetTitle，自动插入文件头 
func SetTitle() 
    "如果文件类型为.sh文件 
    if &filetype == 'sh' 
        call setline(1,"\#########################################################################") 
        call append(line("."), "\# File Name: ".expand("%")) 
        call append(line(".")+1, "\# Created Time: ".strftime("%c")) 
        call append(line(".")+2, "\#########################################################################") 
        call append(line(".")+3, "\#!/bin/bash") 
        call append(line(".")+4, "") 
    elseif &filetype == 'python'  
        call setline(1,          "\#########################################################################")   
        call append(line("."), "\#-*- coding:utf-8 -*-")
        call append(line(".")+1, "\#!/usr/bin/env python")  
        call append(line(".")+2,   "\# File Name: ".expand("%"))   
        call append(line(".")+3, "\# Created Time: ".strftime("%c"))   
        call append(line(".")+4, "\#########################################################################")  
        call append(line(".")+5, "") 
    elseif expand("%:e")== 'h'
        call setline(1, "/*************************************************************************") 
        call append(line("."), " > File Name: ".expand("%")) 
        call append(line(".")+1, " > Created Time: ".strftime("%c")) 
        call append(line(".")+2, " ************************************************************************/") 
        call append(line(".")+3, "")
    elseif &filetype == 'cpp'
        call setline(1, "/*************************************************************************") 
        call append(line("."), " > File Name: ".expand("%")) 
        call append(line(".")+1, " > Created Time: ".strftime("%c")) 
        call append(line(".")+2, " ************************************************************************/") 
        call append(line(".")+3, "")
        call append(line(".")+4, "#include <iostream>")
        call append(line(".")+5, "")
    elseif &filetype == 'c'
        call setline(1, "/*************************************************************************") 
        call append(line("."), " > File Name: ".expand("%")) 
        call append(line(".")+1, " > Created Time: ".strftime("%c")) 
        call append(line(".")+2, " ************************************************************************/") 
        call append(line(".")+3, "")
        call append(line(".")+4, "#include <stdio.h>")
        call append(line(".")+5, "")
    else 
        call setline(1, "/*************************************************************************") 
        call append(line("."), " > File Name: ".expand("%")) 
        call append(line(".")+1, " > Created Time: ".strftime("%c")) 
        call append(line(".")+2, " ************************************************************************/") 
        call append(line(".")+3, "")
    endif
    "新建文件后，自动定位到文件末尾
    autocmd BufNewFile * normal G
endfunc 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"自动补全
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction
filetype plugin indent on 

"highlight Functions
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>[^()]*)("me=e-2
autocmd BufNewFile,BufRead * :syntax match cfunctions "\<[a-zA-Z_][a-zA-Z_0-9]*\>\s*("me=e-1
hi cFunctions gui=NONE cterm=bold  ctermfg=blue

hi PreCondit ctermfg=161 cterm=bold
highlight LineNr ctermfg=darkblue
hi MatchParen ctermbg=Yellow guibg=lightblue

set cursorline
hi CursorLine cterm=underline
hi SpellBad gui=undercurl ctermbg=52
hi SpellCap    guisp=#7070F0 gui=undercurl
hi SpellLocal  guisp=#70F0F0 gui=undercurl
hi SpellRare   guisp=#FFFFFF gui=undercurl
hi SpellCap                ctermbg=17
hi SpellLocal              ctermbg=17
hi SpellRare  ctermfg=none ctermbg=none  cterm=reverse

let vim_markdown_preview_github=1

" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  " autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

"" vimdiff
if &diff
    colorscheme evening
endif
